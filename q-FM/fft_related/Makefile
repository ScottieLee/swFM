# Makefile.in generated by automake 1.11.1 from Makefile.am.
# gr-qtgui/src/lib/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



#
# Copyright 2008,2009 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

# -*- Makefile -*-
#
# Copyright 2004,2006,2007,2008,2009,2010 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

# -*- Makefile -*-
#
# Copyright 2009 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

# -*- Makefile -*-
#
# Copyright 2009 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

# Makefile.swig.gen for qtgui.i



pkgdatadir = $(datadir)/gnuradio
pkgincludedir = $(includedir)/gnuradio
pkglibdir = $(libdir)/gnuradio
pkglibexecdir = $(libexecdir)/gnuradio
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
DIST_COMMON = $(am__qtgui_python_PYTHON_DIST) \
	$(am__qtgui_swiginclude_HEADERS_DIST) $(grinclude_HEADERS) \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/Makefile.swig.gen $(top_srcdir)/Makefile.common \
	$(top_srcdir)/Makefile.swig
am__append_1 = $(DEPDIR)/qtgui-generate-*
am__append_2 = $(DEPDIR)/*.S*

# add some of the variables generated inside the Makefile.swig.gen
am__append_3 = \
	$(swig_built_sources)

subdir = gr-qtgui/src/lib
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/config/acx_cblas.m4 \
	$(top_srcdir)/config/acx_pthread.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/cppunit.m4 \
	$(top_srcdir)/config/gr_check_createfilemapping.m4 \
	$(top_srcdir)/config/gr_check_memalign.m4 \
	$(top_srcdir)/config/gr_check_shm_open.m4 \
	$(top_srcdir)/config/gr_doxygen.m4 \
	$(top_srcdir)/config/gr_git.m4 \
	$(top_srcdir)/config/gr_gprof.m4 \
	$(top_srcdir)/config/gr_lib64.m4 \
	$(top_srcdir)/config/gr_libgnuradio_core_extra_ldflags.m4 \
	$(top_srcdir)/config/gr_no_undefined.m4 \
	$(top_srcdir)/config/gr_pwin32.m4 \
	$(top_srcdir)/config/gr_python.m4 \
	$(top_srcdir)/config/gr_qwt.m4 \
	$(top_srcdir)/config/gr_qwtplot3d.m4 \
	$(top_srcdir)/config/gr_scripting.m4 \
	$(top_srcdir)/config/gr_set_md_cpu.m4 \
	$(top_srcdir)/config/gr_swig.m4 \
	$(top_srcdir)/config/gr_sysv_shm.m4 \
	$(top_srcdir)/config/gr_version.m4 \
	$(top_srcdir)/config/grc_build.m4 \
	$(top_srcdir)/config/grc_docs.m4 \
	$(top_srcdir)/config/grc_gcell.m4 \
	$(top_srcdir)/config/grc_gnuradio_core.m4 \
	$(top_srcdir)/config/grc_gnuradio_examples.m4 \
	$(top_srcdir)/config/grc_gr_atsc.m4 \
	$(top_srcdir)/config/grc_gr_audio_alsa.m4 \
	$(top_srcdir)/config/grc_gr_audio_jack.m4 \
	$(top_srcdir)/config/grc_gr_audio_oss.m4 \
	$(top_srcdir)/config/grc_gr_audio_osx.m4 \
	$(top_srcdir)/config/grc_gr_audio_portaudio.m4 \
	$(top_srcdir)/config/grc_gr_audio_windows.m4 \
	$(top_srcdir)/config/grc_gr_comedi.m4 \
	$(top_srcdir)/config/grc_gr_cvsd_vocoder.m4 \
	$(top_srcdir)/config/grc_gr_gcell.m4 \
	$(top_srcdir)/config/grc_gr_gpio.m4 \
	$(top_srcdir)/config/grc_gr_gsm_fr_vocoder.m4 \
	$(top_srcdir)/config/grc_gr_msdd6000.m4 \
	$(top_srcdir)/config/grc_gr_noaa.m4 \
	$(top_srcdir)/config/grc_gr_pager.m4 \
	$(top_srcdir)/config/grc_gr_qtgui.m4 \
	$(top_srcdir)/config/grc_gr_radar_mono.m4 \
	$(top_srcdir)/config/grc_gr_radio_astronomy.m4 \
	$(top_srcdir)/config/grc_gr_sounder.m4 \
	$(top_srcdir)/config/grc_gr_trellis.m4 \
	$(top_srcdir)/config/grc_gr_usrp.m4 \
	$(top_srcdir)/config/grc_gr_usrp2.m4 \
	$(top_srcdir)/config/grc_gr_utils.m4 \
	$(top_srcdir)/config/grc_gr_video_sdl.m4 \
	$(top_srcdir)/config/grc_gr_wxgui.m4 \
	$(top_srcdir)/config/grc_grc.m4 \
	$(top_srcdir)/config/grc_gruel.m4 \
	$(top_srcdir)/config/grc_usrp.m4 \
	$(top_srcdir)/config/grc_usrp2.m4 \
	$(top_srcdir)/config/lf_cc.m4 $(top_srcdir)/config/lf_cxx.m4 \
	$(top_srcdir)/config/lf_warnings.m4 \
	$(top_srcdir)/config/macosx_audiounit.m4 \
	$(top_srcdir)/config/mkstemp.m4 \
	$(top_srcdir)/config/onceonly.m4 $(top_srcdir)/config/pkg.m4 \
	$(top_srcdir)/config/sdl.m4 \
	$(top_srcdir)/config/usrp_fusb_tech.m4 \
	$(top_srcdir)/config/usrp_libusb.m4 \
	$(top_srcdir)/config/usrp_sdcc.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(qtgui_pylibdir)" \
	"$(DESTDIR)$(qtgui_pythondir)" "$(DESTDIR)$(grincludedir)" \
	"$(DESTDIR)$(qtgui_swigincludedir)"
LTLIBRARIES = $(lib_LTLIBRARIES) $(qtgui_pylib_LTLIBRARIES)
am__DEPENDENCIES_1 =
_qtgui_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(qtgui_la_swig_libadd)
am___qtgui_la_SOURCES_DIST = qtgui.cc
am__qtgui_la_OBJECTS = _qtgui_la-qtgui.lo
_qtgui_la_OBJECTS = $(am__qtgui_la_OBJECTS)
_qtgui_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(_qtgui_la_CXXFLAGS) \
	$(CXXFLAGS) $(_qtgui_la_LDFLAGS) $(LDFLAGS) -o $@
am__qtgui_la_rpath = -rpath $(qtgui_pylibdir)
libgnuradio_qtgui_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am__objects_1 = spectrumdisplayform_moc.lo FrequencyDisplayPlot_moc.lo \
	TimeDomainDisplayPlot_moc.lo WaterfallDisplayPlot_moc.lo \
	Waterfall3DDisplayPlot_moc.lo ConstellationDisplayPlot_moc.lo
am_libgnuradio_qtgui_la_OBJECTS = FrequencyDisplayPlot.lo \
	TimeDomainDisplayPlot.lo WaterfallDisplayPlot.lo \
	Waterfall3DDisplayPlot.lo waterfallGlobalData.lo \
	ConstellationDisplayPlot.lo spectrumdisplayform.lo \
	SpectrumGUIClass.lo spectrumUpdateEvents.lo plot_waterfall.lo \
	$(am__objects_1) qtgui_sink_c.lo qtgui_sink_f.lo
libgnuradio_qtgui_la_OBJECTS = $(am_libgnuradio_qtgui_la_OBJECTS)
libgnuradio_qtgui_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(libgnuradio_qtgui_la_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(_qtgui_la_SOURCES) $(libgnuradio_qtgui_la_SOURCES)
DIST_SOURCES = $(am___qtgui_la_SOURCES_DIST) \
	$(libgnuradio_qtgui_la_SOURCES)
am__qtgui_python_PYTHON_DIST = qtgui.py
py_compile = $(top_srcdir)/py-compile
am__qtgui_swiginclude_HEADERS_DIST = qtgui.i
HEADERS = $(grinclude_HEADERS) $(qtgui_swiginclude_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /gnuradio/gnuradio-3.3.0/missing --run aclocal-1.11
ALLOCA = 
ALSA_CFLAGS = -I/usr/include/alsa  
ALSA_CPPFLAGS =  -I/usr/include/alsa
ALSA_INCLUDEDIR = /usr/include
ALSA_LIBS = -lasound -lm -ldl -lpthread -lrt  
AMTAR = ${SHELL} /gnuradio/gnuradio-3.3.0/missing --run tar
AR = ar
AS = as
AUTOCONF = ${SHELL} /gnuradio/gnuradio-3.3.0/missing --run autoconf
AUTOHEADER = ${SHELL} /gnuradio/gnuradio-3.3.0/missing --run autoheader
AUTOMAKE = ${SHELL} /gnuradio/gnuradio-3.3.0/missing --run automake-1.11
AWK = mawk
BOOST_CPPFLAGS = -I/usr/include
BOOST_CXXFLAGS = -pthread
BOOST_DATE_TIME_LIB = -lboost_date_time-mt
BOOST_LDFLAGS = -L/usr/lib
BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options-mt
BOOST_THREAD_LIB = -lboost_thread-mt
BUILD_DATE = Mon, 25 Jun 2012 07:09:26
CBLAS_LIBS = -lcblas -latlas
CC = gcc
CCAS = gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = 
CCDEPMODE = depmode=gcc3
CFLAGS =  -pthread
COMEDI_CFLAGS = 
COMEDI_CPPFLAGS = 
COMEDI_INCLUDEDIR = 
COMEDI_LIBS = 
CPP = gcc -E
CPPFLAGS = 
CPPUNIT_CFLAGS =  
CPPUNIT_CONFIG = 
CPPUNIT_CPPFLAGS = 
CPPUNIT_INCLUDEDIR = /usr/include
CPPUNIT_INCLUDES =  
CPPUNIT_LIBS = -lcppunit -ldl  
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -pthread
CXX_FOR_BUILD = g++
CYGPATH_W = echo
DEFINES = 
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = dlltool
DOCVER = 3.3.0
DOT = 
DOXYGEN = /usr/bin/doxygen
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FFTW3F_CFLAGS =  
FFTW3F_CPPFLAGS = 
FFTW3F_INCLUDEDIR = /usr/include
FFTW3F_LIBS = -lfftw3f -lm  
FGREP = /bin/grep -F
FUSB_TECH = linux
GIT = /usr/bin/git
GIT_COMMIT = 
GIT_DESCRIBE = 
GIT_SEQNO = 
GIT_TAG = 
GREP = /bin/grep
GR_ARCH_BIGENDIAN = 0
GR_HAVE_ARPA_INET = 1
GR_HAVE_BYTESWAP = 1
GR_HAVE_NETINET_IN = 1
GR_PREFSDIR = /usr/local/etc/gnuradio/conf.d
GSL_CFLAGS =  
GSL_CPPFLAGS = 
GSL_INCLUDEDIR = /usr/include
GSL_LIBS = -lgsl -lgslcblas -lm  
GUILE = /usr/bin/guile
HAVE_DOT = NO
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
IPC_LIBS = 
JACK_CFLAGS = 
JACK_CPPFLAGS = 
JACK_INCLUDEDIR = 
JACK_LIBS = 
LD = /usr/bin/ld
LDFLAGS = 
LIBGNURADIO_CORE_EXTRA_LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBUSB_PKG_CONFIG_NAME = libusb
LIBVER = 3.3.0
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /gnuradio/gnuradio-3.3.0/missing --run makeinfo
MD_CPU = x86
MD_SUBCPU = x86
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
NO_UNDEFINED = 
OBJDUMP = objdump
OBJEXT = o
OSS_LIBS = 
OTOOL = 
OTOOL64 = 
PACKAGE = gnuradio
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_URL = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PORTAUDIO_CFLAGS = 
PORTAUDIO_CPPFLAGS = 
PORTAUDIO_INCLUDEDIR = 
PORTAUDIO_LIBS = 
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
PYTHON = /usr/bin/python
PYTHONW = python
PYTHON_CPPFLAGS = -I/usr/include/python2.6
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_LDFLAGS = 
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.6
QMAKE_INCLUDES =  /usr/include/qwt-qt4 /usr/include/qwtplot3d-qt4
QTCORE_CFLAGS = -DQT_SHARED -I/usr/include/qt4 -I/usr/include/qt4/QtCore  
QTCORE_CPPFLAGS =  -DQT_SHARED -I/usr/include/qt4 -I/usr/include/qt4/QtCore
QTCORE_INCLUDEDIR = /usr/include/qt4/QtCore
QTCORE_LIBS = -pthread -lQtCore -lfontconfig -lpthread -lz -lm -ldl -lgthread-2.0 -lrt -lglib-2.0  
QTGUI_CFLAGS = -DQT_SHARED -I/usr/include/qt4 -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtCore  
QTGUI_CPPFLAGS =  -DQT_SHARED -I/usr/include/qt4 -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtCore
QTGUI_INCLUDEDIR = /usr/include/qt4/QtGui
QTGUI_LIBS = -pthread -L/usr/X11R6/lib -lQtGui -lQtDBus -lQtXml -laudio -lXt -lpng -lgobject-2.0 -lSM -lICE -lXrender -lfreetype -lXext -lX11 -lQtCore -lfontconfig -lpthread -lz -lm -ldl -lgthread-2.0 -lrt -lglib-2.0  
QTOPENGL_CFLAGS = -DQT_SHARED -I/usr/include/qt4 -I/usr/include/qt4/QtOpenGL -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui  
QTOPENGL_CPPFLAGS =  -DQT_SHARED -I/usr/include/qt4 -I/usr/include/qt4/QtOpenGL -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui
QTOPENGL_INCLUDEDIR = /usr/include/qt4/QtOpenGL
QTOPENGL_LIBS = -pthread -L/usr/X11R6/lib -lQtOpenGL -lGL -lQtGui -lQtDBus -lQtXml -laudio -lXt -lpng -lgobject-2.0 -lSM -lICE -lXrender -lfreetype -lXext -lX11 -lQtCore -lfontconfig -lpthread -lz -lm -ldl -lgthread-2.0 -lrt -lglib-2.0  
QT_INCLUDES =  -I/usr/include/qwt-qt4  -I/usr/include/qwtplot3d-qt4 -DQT_SHARED -I/usr/include/qt4 -I/usr/include/qt4/QtCore   -DQT_SHARED -I/usr/include/qt4 -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtCore  
QT_LIBS =  -lqwt-qt4  -lqwtplot3d-qt4 -pthread -L/usr/X11R6/lib -lQtOpenGL -lGL -lQtGui -lQtDBus -lQtXml -laudio -lXt -lpng -lgobject-2.0 -lSM -lICE -lXrender -lfreetype -lXext -lX11 -lQtCore -lfontconfig -lpthread -lz -lm -ldl -lgthread-2.0 -lrt -lglib-2.0  
QT_MOC_EXEC = /usr/bin/moc-qt4
QT_UIC_EXEC = /usr/bin/uic-qt4
QWTPLOT3D_CFLAGS =  -I/usr/include/qwtplot3d-qt4
QWTPLOT3D_LIBS =  -lqwtplot3d-qt4
QWT_CFLAGS =  -I/usr/include/qwt-qt4
QWT_LIBS =  -lqwt-qt4
RANLIB = ranlib
RELEASE = 3.3.0
RM_PROG = /bin/rm
SDL_CFLAGS = -D_GNU_SOURCE=1 -D_REENTRANT -I/usr/include/SDL  
SDL_CONFIG = 
SDL_CPPFLAGS =  -D_GNU_SOURCE=1 -D_REENTRANT -I/usr/include/SDL
SDL_INCLUDEDIR = /usr/include
SDL_LIBS = -lSDL -lasound -lm -ldl -lesd -lpulse-simple -lpulse -laa -lcaca -lpthread  
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SHM_OPEN_LIBS = -lrt 
SPU_GCC_PROG = no
STRIP = strip
SWIG = /usr/bin/swig -c++
SWIG_PYTHON_CPPFLAGS = -I/usr/include/python2.6
SWIG_PYTHON_LIB = -lswigpy
SWIG_PYTHON_OPT = -python
SYSCONFDIR = /usr/local/etc
USB_CFLAGS =  
USB_CPPFLAGS = 
USB_INCLUDEDIR = /usr/include
USB_INCLUDES = -I/usr/include
USB_LIBS = -lusb  
USE_LIBUSB1 = 0
USRP2_INCLUDES = -I${abs_top_srcdir}/usrp2/host/include 		-I${abs_top_srcdir}/usrp2/firmware/include
USRP2_LA = ${abs_top_builddir}/usrp2/host/lib/libusrp2.la
VERSION = 3.3.0
WINAUDIO_LIBS = 
XAS = asx8051 -plosgff
XCC = sdcc -mmcs51 --no-xinit-opt
XDG_UTILS = true
XMLTO = 
abs_builddir = /gnuradio/gnuradio-3.3.0/gr-qtgui/src/lib
abs_srcdir = /gnuradio/gnuradio-3.3.0/gr-qtgui/src/lib
abs_top_builddir = /gnuradio/gnuradio-3.3.0
abs_top_srcdir = /gnuradio/gnuradio-3.3.0
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
acx_pthread_config = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=ustar -chf - "$$tardir"
am__untar = tar -xf -
autoconf_default_CFLAGS = -g -O2
autoconf_default_CXXFLAGS = -g -O2
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_dirs = config gruel gnuradio-core usrp usrp2 gr-usrp gr-usrp2 gr-msdd6000 gr-audio-alsa gr-audio-oss gr-atsc gr-cvsd-vocoder gr-gpio gr-gsm-fr-vocoder gr-noaa gr-pager gr-radar-mono gr-radio-astronomy gr-trellis gr-video-sdl gr-wxgui gr-qtgui gr-sounder gr-utils gnuradio-examples grc docs
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
docs_INCLUDEDIR = 
docs_INCLUDES = 
docs_LA = 
docs_LDFLAG = 
docs_LIBDIRPATH = 
dvidir = ${docdir}
enable_dot = no
enable_html_docs = YES
enable_latex_docs = NO
enable_xml_docs = YES
exec_prefix = ${prefix}
gcell_INCLUDEDIR = 
gcell_INCLUDES = -I${abs_top_srcdir}/gcell/include
gcell_LA = ${abs_top_builddir}/gcell/lib/libgcell.la
gcell_LDFLAG = 
gcell_LIBDIRPATH = 
gcell_spu_INCLUDES = -I${abs_top_srcdir}/gcell/include
gcell_spu_LA = ${abs_top_builddir}/gcell/lib/spu/libgcell_spu.a
generate_docs = docs
gnuradio_core_I = 
gnuradio_core_INCLUDEDIR = 
gnuradio_core_INCLUDES = -I${abs_top_srcdir}/gnuradio-core/src/lib/runtime -I${abs_top_srcdir}/gnuradio-core/src/lib/general -I${abs_top_builddir}/gnuradio-core/src/lib/general -I${abs_top_srcdir}/gnuradio-core/src/lib/gengen -I${abs_top_builddir}/gnuradio-core/src/lib/gengen -I${abs_top_srcdir}/gnuradio-core/src/lib/filter -I${abs_top_builddir}/gnuradio-core/src/lib/filter -I${abs_top_srcdir}/gnuradio-core/src/lib/missing -I${abs_top_srcdir}/gnuradio-core/src/lib/reed-solomon -I${abs_top_srcdir}/gnuradio-core/src/lib/viterbi -I${abs_top_srcdir}/gnuradio-core/src/lib/io -I${abs_top_srcdir}/gnuradio-core/src/lib/g72x -I${abs_top_srcdir}/gnuradio-core/src/lib/swig -I${abs_top_srcdir}/gnuradio-core/src/lib/hier -I${abs_top_builddir}/gnuradio-core/src/lib/swig $(FFTW3F_CFLAGS) $(GSL_CFLAGS)
gnuradio_core_LA = ${abs_top_builddir}/gnuradio-core/src/lib/libgnuradio-core.la
gnuradio_core_LDFLAG = 
gnuradio_core_LIBDIRPATH = ${abs_top_builddir}/gnuradio-core/src/lib:${abs_top_builddir}/gnuradio-core/src/lib/.libs
gnuradio_core_PYDIRPATH = ${abs_top_srcdir}/gnuradio-core/src/python
gnuradio_core_SWIGDIRPATH = ${abs_top_builddir}/gnuradio-core/src/lib/swig:${abs_top_builddir}/gnuradio-core/src/lib/swig/.libs:${abs_top_srcdir}/gnuradio-core/src/lib/swig
gnuradio_examples_INCLUDEDIR = 
gnuradio_examples_INCLUDES = 
gnuradio_examples_LA = 
gnuradio_examples_LDFLAG = 
gnuradio_examples_LIBDIRPATH = 
gr_atsc_INCLUDEDIR = 
gr_atsc_INCLUDES = 
gr_atsc_LA = 
gr_atsc_LDFLAG = 
gr_atsc_LIBDIRPATH = 
gr_audio_alsa_INCLUDEDIR = 
gr_audio_alsa_INCLUDES = 
gr_audio_alsa_LA = 
gr_audio_alsa_LDFLAG = 
gr_audio_alsa_LIBDIRPATH = 
gr_audio_jack_INCLUDEDIR = 
gr_audio_jack_INCLUDES = 
gr_audio_jack_LA = 
gr_audio_jack_LDFLAG = 
gr_audio_jack_LIBDIRPATH = 
gr_audio_oss_INCLUDEDIR = 
gr_audio_oss_INCLUDES = 
gr_audio_oss_LA = 
gr_audio_oss_LDFLAG = 
gr_audio_oss_LIBDIRPATH = 
gr_audio_osx_INCLUDEDIR = 
gr_audio_osx_INCLUDES = 
gr_audio_osx_LA = 
gr_audio_osx_LDFLAG = 
gr_audio_osx_LIBDIRPATH = 
gr_audio_portaudio_INCLUDEDIR = 
gr_audio_portaudio_INCLUDES = 
gr_audio_portaudio_LA = 
gr_audio_portaudio_LDFLAG = 
gr_audio_portaudio_LIBDIRPATH = 
gr_audio_windows_INCLUDEDIR = 
gr_audio_windows_INCLUDES = 
gr_audio_windows_LA = 
gr_audio_windows_LDFLAG = 
gr_audio_windows_LIBDIRPATH = 
gr_comedi_INCLUDEDIR = 
gr_comedi_INCLUDES = 
gr_comedi_LA = 
gr_comedi_LDFLAG = 
gr_comedi_LIBDIRPATH = 
gr_cvsd_vocoder_INCLUDEDIR = 
gr_cvsd_vocoder_INCLUDES = 
gr_cvsd_vocoder_LA = 
gr_cvsd_vocoder_LDFLAG = 
gr_cvsd_vocoder_LIBDIRPATH = 
gr_gcell_INCLUDEDIR = 
gr_gcell_INCLUDES = 
gr_gcell_LA = 
gr_gcell_LDFLAG = 
gr_gcell_LIBDIRPATH = 
gr_gpio_INCLUDEDIR = 
gr_gpio_INCLUDES = 
gr_gpio_LA = 
gr_gpio_LDFLAG = 
gr_gpio_LIBDIRPATH = 
gr_gsm_fr_vocoder_INCLUDEDIR = 
gr_gsm_fr_vocoder_INCLUDES = 
gr_gsm_fr_vocoder_LA = 
gr_gsm_fr_vocoder_LDFLAG = 
gr_gsm_fr_vocoder_LIBDIRPATH = 
gr_libdir_suffix = 
gr_msdd6000_INCLUDEDIR = 
gr_msdd6000_INCLUDES = 
gr_msdd6000_LA = 
gr_msdd6000_LDFLAG = 
gr_msdd6000_LIBDIRPATH = 
gr_noaa_INCLUDEDIR = 
gr_noaa_INCLUDES = 
gr_noaa_LA = 
gr_noaa_LDFLAG = 
gr_noaa_LIBDIRPATH = 
gr_pager_INCLUDEDIR = 
gr_pager_INCLUDES = 
gr_pager_LA = 
gr_pager_LDFLAG = 
gr_pager_LIBDIRPATH = 
gr_qtgui_INCLUDEDIR = 
gr_qtgui_INCLUDES = 
gr_qtgui_LA = 
gr_qtgui_LDFLAG = 
gr_qtgui_LIBDIRPATH = 
gr_radar_mono_INCLUDEDIR = 
gr_radar_mono_INCLUDES = 
gr_radar_mono_LA = 
gr_radar_mono_LDFLAG = 
gr_radar_mono_LIBDIRPATH = 
gr_radio_astronomy_INCLUDEDIR = 
gr_radio_astronomy_INCLUDES = 
gr_radio_astronomy_LA = 
gr_radio_astronomy_LDFLAG = 
gr_radio_astronomy_LIBDIRPATH = 
gr_sounder_INCLUDEDIR = 
gr_sounder_INCLUDES = 
gr_sounder_LA = 
gr_sounder_LDFLAG = 
gr_sounder_LIBDIRPATH = 
gr_trellis_INCLUDEDIR = 
gr_trellis_INCLUDES = 
gr_trellis_LA = 
gr_trellis_LDFLAG = 
gr_trellis_LIBDIRPATH = 
gr_usrp2_INCLUDEDIR = 
gr_usrp2_INCLUDES = 
gr_usrp2_LA = 
gr_usrp2_LDFLAG = 
gr_usrp2_LIBDIRPATH = 
gr_usrp_INCLUDEDIR = 
gr_usrp_INCLUDES = 
gr_usrp_LA = 
gr_usrp_LDFLAG = 
gr_usrp_LIBDIRPATH = 
gr_utils_INCLUDEDIR = 
gr_utils_INCLUDES = 
gr_utils_LA = 
gr_utils_LDFLAG = 
gr_utils_LIBDIRPATH = 
gr_video_sdl_INCLUDEDIR = 
gr_video_sdl_INCLUDES = 
gr_video_sdl_LA = 
gr_video_sdl_LDFLAG = 
gr_video_sdl_LIBDIRPATH = 
gr_wxgui_INCLUDEDIR = 
gr_wxgui_INCLUDES = 
gr_wxgui_LA = 
gr_wxgui_LDFLAG = 
gr_wxgui_LIBDIRPATH = 
grc_INCLUDEDIR = 
grc_INCLUDES = 
grc_LA = 
grc_LDFLAG = 
grc_LIBDIRPATH = 
gruel_INCLUDEDIR = 
gruel_INCLUDES = -I${abs_top_srcdir}/gruel/src/include -I${abs_top_builddir}/gruel/src/include
gruel_LA = ${abs_top_builddir}/gruel/src/lib/libgruel.la
gruel_LDFLAG = 
gruel_LIBDIRPATH = ${abs_top_builddir}/gruel/src/lib:${abs_top_builddir}/gruel/src/lib/.libs
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /gnuradio/gnuradio-3.3.0/install-sh
lf_CFLAGS =  -Wall -Werror-implicit-function-declaration
lf_CXXFLAGS =  -Wall -Woverloaded-virtual
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/gnuradio
pkgpythondir = ${pythondir}/gnuradio
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${exec_prefix}/lib/python2.6/dist-packages
pythondir = ${prefix}/lib/python2.6/dist-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
skipped_dirs =  gcell gr-gcell gr-audio-jack gr-audio-osx gr-audio-portaudio gr-audio-windows gr-comedi
srcdir = .
subdirs =  usrp2/firmware
swig_CXXFLAGS = -g -O1 -Wno-strict-aliasing -Wno-parentheses
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
top_build_prefix = ../../../
top_builddir = ../../..
top_srcdir = ../../..
usrp2_INCLUDEDIR = 
usrp2_INCLUDES = 
usrp2_LA = 
usrp2_LDFLAG = 
usrp2_LIBDIRPATH = 
usrp_INCLUDEDIR = 
usrp_INCLUDES =  		-I${abs_top_srcdir}/usrp/host/include 		-I${abs_top_builddir}/usrp/host/include 		-I${abs_top_srcdir}/usrp/firmware/include
usrp_LA = ${abs_top_builddir}/usrp/host/lib/libusrp.la
usrp_LDFLAG = 
usrp_LIBDIRPATH = 
with_INCLUDES = 
with_LIBDIRPATH = 
with_PYDIRPATH = 
with_SWIGDIRPATH = 
with_SWIG_INCLUDES = 
with_dirs = 
AM_CFLAGS = -g -O2  -Wall -Werror-implicit-function-declaration
AM_CXXFLAGS = -g -O2  -Wall -Woverloaded-virtual

# Sets ABI version in SONAME and appends -LIBVER to filename
LTVERSIONFLAGS = -version-info 0:0:0 -release $(LIBVER)

# includes
grincludedir = $(includedir)/gnuradio

# swig includes
swigincludedir = $(grincludedir)/swig

# Install the gnuradio stuff in the appropriate subdirectory
# This usually ends up at:
#   ${prefix}/lib/python${python_version}/site-packages/gnuradio
grpythondir = $(pythondir)/gnuradio
grpyexecdir = $(pyexecdir)/gnuradio

# Install the non-gnuradio usrp stuff in the appropriate subdirectory
# This usually ends up at:
#   ${prefix}/lib/python${python_version}/site-packages/usrpm
usrppythondir = $(pythondir)/usrpm
usrppyexecdir = $(pyexecdir)/usrpm

# gcell includes
gcellincludedir = $(includedir)/gcell
gcellspuincludedir = $(includedir)/gcell/spu

# Cell spu libs
libspudir = $(libdir)spu

# This used to be set in configure.ac but is now defined here for all 
# Makefiles when this fragment is included.
STD_DEFINES_AND_INCLUDES = $(DEFINES) $(BOOST_CPPFLAGS) \
	$(GNURADIO_INCLUDES) $(GRUEL_INCLUDES)


# when including for compilation from pre-installed libraries and such,
# need to make sure those are put last on the compile command
WITH_INCLUDES = 
WITH_SWIG_INCLUDES = 

# Where to find gnuradio include files in the current build tree
# top_srcdir for original stuff, top_builddir for generated files
GNURADIO_INCLUDES = -I${abs_top_srcdir}/gnuradio-core/src/lib/runtime -I${abs_top_srcdir}/gnuradio-core/src/lib/general -I${abs_top_builddir}/gnuradio-core/src/lib/general -I${abs_top_srcdir}/gnuradio-core/src/lib/gengen -I${abs_top_builddir}/gnuradio-core/src/lib/gengen -I${abs_top_srcdir}/gnuradio-core/src/lib/filter -I${abs_top_builddir}/gnuradio-core/src/lib/filter -I${abs_top_srcdir}/gnuradio-core/src/lib/missing -I${abs_top_srcdir}/gnuradio-core/src/lib/reed-solomon -I${abs_top_srcdir}/gnuradio-core/src/lib/viterbi -I${abs_top_srcdir}/gnuradio-core/src/lib/io -I${abs_top_srcdir}/gnuradio-core/src/lib/g72x -I${abs_top_srcdir}/gnuradio-core/src/lib/swig -I${abs_top_srcdir}/gnuradio-core/src/lib/hier -I${abs_top_builddir}/gnuradio-core/src/lib/swig $(FFTW3F_CFLAGS) $(GSL_CFLAGS)

# How to link in GNU Radio core library from inside the tree
GNURADIO_CORE_LA = ${abs_top_builddir}/gnuradio-core/src/lib/libgnuradio-core.la

# How to link in the USRP library from inside the tree
GRUEL_INCLUDES = -I${abs_top_srcdir}/gruel/src/include -I${abs_top_builddir}/gruel/src/include
GRUEL_LA = ${abs_top_builddir}/gruel/src/lib/libgruel.la

# How to link in the USRP library from inside the tree
USRP_INCLUDES =  		-I${abs_top_srcdir}/usrp/host/include 		-I${abs_top_builddir}/usrp/host/include 		-I${abs_top_srcdir}/usrp/firmware/include
USRP_LA = ${abs_top_builddir}/usrp/host/lib/libusrp.la

# How to link the gcell library from inside the tree (the PPU part)
GCELL_INCLUDES = -I${abs_top_srcdir}/gcell/include
GCELL_LA = ${abs_top_builddir}/gcell/lib/libgcell.la

# How to link the gcell library from inside the tree (the SPU part)
GCELL_SPU_INCLUDES = -I${abs_top_srcdir}/gcell/include
GCELL_SPU_LA = ${abs_top_builddir}/gcell/lib/spu/libgcell_spu.a

# libtool aware wrapper for ppu-embedspu
GCELL_EMBEDSPU_LIBTOOL = /gnuradio/gnuradio-3.3.0/gcell/lib/runtime/gcell-embedspu-libtool

# Fix for BSD make not defining $(RM).  We define it now in configure.ac
# using AM_PATH_PROG, but now here have to add a -f to be like GNU make
RM = $(RM_PROG) -f
RUN_GUILE = GUILE_LOAD_PATH="/gnuradio/gnuradio-3.3.0/gruel/src/scheme" /usr/bin/guile -e main -s

# Base directory for example applications
exampledir = $(datadir)/gnuradio/examples
gr_docdir = $(docdir)-$(DOCVER)

# System configuration files
gr_prefsdir = $(GR_PREFSDIR)

# Data directory for grc block wrappers
grc_blocksdir = $(pkgdatadir)/grc/blocks

# Other common defines; use "+=" to add to these
STAMPS = $(am__append_1)
MOSTLYCLEANFILES = $(BUILT_SOURCES) $(STAMPS) *.pyc *.pyo *~ *.tmp \
	*.loT $(am__append_2)
AM_CPPFLAGS = $(STD_DEFINES_AND_INCLUDES) $(PYTHON_CPPFLAGS) \
              $(QT_INCLUDES) -I. $(WITH_INCLUDES)


# Only include these files in the build if qtgui passes configure checks
# This is mostly to help make distcheck pass
QMAKE_SOURCES = \
	spectrumdisplayform_moc.cc		\
	FrequencyDisplayPlot_moc.cc	 	\
	TimeDomainDisplayPlot_moc.cc		\
	WaterfallDisplayPlot_moc.cc		\
	Waterfall3DDisplayPlot_moc.cc		\
	ConstellationDisplayPlot_moc.cc		\
	spectrumdisplayform_ui.h

EXTRA_DIST = spectrumdisplayform.ui
BUILT_SOURCES = $(QMAKE_SOURCES) $(am__append_3)

# Build the normal library for C++ apps to link against
lib_LTLIBRARIES = libgnuradio-qtgui.la

# These are the source files that go into the shared library
libgnuradio_qtgui_la_SOURCES = \
	FrequencyDisplayPlot.cc 		\
	TimeDomainDisplayPlot.cc		\
	WaterfallDisplayPlot.cc			\
	Waterfall3DDisplayPlot.cc		\
	waterfallGlobalData.cc			\
	ConstellationDisplayPlot.cc		\
	spectrumdisplayform.cc			\
	SpectrumGUIClass.cc			\
	spectrumUpdateEvents.cc			\
	plot_waterfall.cc			\
	$(QMAKE_SOURCES)			\
	qtgui_sink_c.cc				\
	qtgui_sink_f.cc


# These headers get installed in ${prefix}/include/gnuradio
grinclude_HEADERS = \
	FrequencyDisplayPlot.h		\
	TimeDomainDisplayPlot.h		\
	WaterfallDisplayPlot.h		\
	Waterfall3DDisplayPlot.h	\
	waterfallGlobalData.h		\
	ConstellationDisplayPlot.h	\
	highResTimeFunctions.h		\
	plot_waterfall.h		\
	spectrumdisplayform.h		\
	SpectrumGUIClass.h		\
	spectrumUpdateEvents.h		\
	qtgui.h				\
	qtgui_sink_c.h			\
	qtgui_sink_f.h


# magic flags
libgnuradio_qtgui_la_LDFLAGS = $(NO_UNDEFINED) $(LTVERSIONFLAGS)
libgnuradio_qtgui_la_LIBADD = \
	$(GNURADIO_CORE_LA)	\
	-lstdc++		\
	$(QT_LIBS)


##############################
# SWIG interface and library
TOP_SWIG_IFILES = \
	qtgui.i


# Install so that they end up available as:
#   import gnuradio.qtgui
# This ends up at:
#   ${prefix}/lib/python${python_version}/site-packages/gnuradio
qtgui_pythondir_category = \
	gnuradio/qtgui


# additional libraries for linking with the SWIG-generated library
qtgui_la_swig_libadd = \
	libgnuradio-qtgui.la

SWIG_PYTHON_FLAGS = \
	-fvirtual	\
	-python		\
	-modern		\
	-keyword	\
	-w511		\
	-outdir .

STD_SWIG_PYTHON_ARGS = \
	$(SWIG_PYTHON_FLAGS)			\
	$(STD_DEFINES_AND_INCLUDES)		\
	$(WITH_SWIG_INCLUDES)			\
	$(WITH_INCLUDES)

STD_SWIG_LA_LD_FLAGS = \
	$(PYTHON_LDFLAGS)	\
	-module			\
	-avoid-version		\
	$(NO_UNDEFINED)

STD_SWIG_LA_LIB_ADD = \
	-lstdc++

STD_SWIG_CXX_FLAGS = -g -O1 -Wno-strict-aliasing -Wno-parentheses
SUFFIXES = .i
swig_built_sources = qtgui.py qtgui.cc
qtgui_pythondir = $(pythondir)/$(qtgui_pythondir_category)
qtgui_pylibdir = $(pyexecdir)/$(qtgui_pylibdir_category)
qtgui_swigincludedir = $(swigincludedir)
qtgui_swiginclude_HEADERS = \
	qtgui.i			\
	$(qtgui_swiginclude_headers)

qtgui_pylib_LTLIBRARIES = \
	_qtgui.la

_qtgui_la_SOURCES = \
	qtgui.cc			\
	$(qtgui_la_swig_sources)

_qtgui_la_LIBADD = \
	$(STD_SWIG_LA_LIB_ADD)		\
	$(qtgui_la_swig_libadd)

_qtgui_la_LDFLAGS = \
	$(STD_SWIG_LA_LD_FLAGS)		\
	$(qtgui_la_swig_ldflags)

_qtgui_la_CXXFLAGS = \
	$(STD_SWIG_CXX_FLAGS)		\
	$(qtgui_la_swig_cxxflags)

qtgui_python_PYTHON = \
	qtgui.py			\
	$(qtgui_python)


# Do not distribute built sources, they may contain generated paths
# which are invalid on other systems
no_dist_files = $(BUILT_SOURCES)
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .i .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Makefile.common $(top_srcdir)/Makefile.swig $(srcdir)/Makefile.swig.gen $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu gr-qtgui/src/lib/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu gr-qtgui/src/lib/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-qtgui_pylibLTLIBRARIES: $(qtgui_pylib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(qtgui_pylibdir)" || $(MKDIR_P) "$(DESTDIR)$(qtgui_pylibdir)"
	@list='$(qtgui_pylib_LTLIBRARIES)'; test -n "$(qtgui_pylibdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(qtgui_pylibdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(qtgui_pylibdir)"; \
	}

uninstall-qtgui_pylibLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(qtgui_pylib_LTLIBRARIES)'; test -n "$(qtgui_pylibdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(qtgui_pylibdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(qtgui_pylibdir)/$$f"; \
	done

clean-qtgui_pylibLTLIBRARIES:
	-test -z "$(qtgui_pylib_LTLIBRARIES)" || rm -f $(qtgui_pylib_LTLIBRARIES)
	@list='$(qtgui_pylib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
_qtgui.la: $(_qtgui_la_OBJECTS) $(_qtgui_la_DEPENDENCIES) 
	$(_qtgui_la_LINK) $(am__qtgui_la_rpath) $(_qtgui_la_OBJECTS) $(_qtgui_la_LIBADD) $(LIBS)
libgnuradio-qtgui.la: $(libgnuradio_qtgui_la_OBJECTS) $(libgnuradio_qtgui_la_DEPENDENCIES) 
	$(libgnuradio_qtgui_la_LINK) -rpath $(libdir) $(libgnuradio_qtgui_la_OBJECTS) $(libgnuradio_qtgui_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/ConstellationDisplayPlot.Plo
include ./$(DEPDIR)/ConstellationDisplayPlot_moc.Plo
include ./$(DEPDIR)/FrequencyDisplayPlot.Plo
include ./$(DEPDIR)/FrequencyDisplayPlot_moc.Plo
include ./$(DEPDIR)/SpectrumGUIClass.Plo
include ./$(DEPDIR)/TimeDomainDisplayPlot.Plo
include ./$(DEPDIR)/TimeDomainDisplayPlot_moc.Plo
include ./$(DEPDIR)/Waterfall3DDisplayPlot.Plo
include ./$(DEPDIR)/Waterfall3DDisplayPlot_moc.Plo
include ./$(DEPDIR)/WaterfallDisplayPlot.Plo
include ./$(DEPDIR)/WaterfallDisplayPlot_moc.Plo
include ./$(DEPDIR)/_qtgui_la-qtgui.Plo
include ./$(DEPDIR)/plot_waterfall.Plo
include ./$(DEPDIR)/qtgui_sink_c.Plo
include ./$(DEPDIR)/qtgui_sink_f.Plo
include ./$(DEPDIR)/spectrumUpdateEvents.Plo
include ./$(DEPDIR)/spectrumdisplayform.Plo
include ./$(DEPDIR)/spectrumdisplayform_moc.Plo
include ./$(DEPDIR)/waterfallGlobalData.Plo

.cc.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

_qtgui_la-qtgui.lo: qtgui.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(_qtgui_la_CXXFLAGS) $(CXXFLAGS) -MT _qtgui_la-qtgui.lo -MD -MP -MF $(DEPDIR)/_qtgui_la-qtgui.Tpo -c -o _qtgui_la-qtgui.lo `test -f 'qtgui.cc' || echo '$(srcdir)/'`qtgui.cc
	$(am__mv) $(DEPDIR)/_qtgui_la-qtgui.Tpo $(DEPDIR)/_qtgui_la-qtgui.Plo
#	source='qtgui.cc' object='_qtgui_la-qtgui.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(_qtgui_la_CXXFLAGS) $(CXXFLAGS) -c -o _qtgui_la-qtgui.lo `test -f 'qtgui.cc' || echo '$(srcdir)/'`qtgui.cc

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-qtgui_pythonPYTHON: $(qtgui_python_PYTHON)
	@$(NORMAL_INSTALL)
	test -z "$(qtgui_pythondir)" || $(MKDIR_P) "$(DESTDIR)$(qtgui_pythondir)"
	@list='$(qtgui_python_PYTHON)'; dlist=; list2=; test -n "$(qtgui_pythondir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then b=; else b="$(srcdir)/"; fi; \
	  if test -f $$b$$p; then \
	    $(am__strip_dir) \
	    dlist="$$dlist $$f"; \
	    list2="$$list2 $$b$$p"; \
	  else :; fi; \
	done; \
	for file in $$list2; do echo $$file; done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(qtgui_pythondir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(qtgui_pythondir)" || exit $$?; \
	done || exit $$?; \
	if test -n "$$dlist"; then \
	  if test -z "$(DESTDIR)"; then \
	    PYTHON=$(PYTHON) $(py_compile) --basedir "$(qtgui_pythondir)" $$dlist; \
	  else \
	    PYTHON=$(PYTHON) $(py_compile) --destdir "$(DESTDIR)" --basedir "$(qtgui_pythondir)" $$dlist; \
	  fi; \
	else :; fi

uninstall-qtgui_pythonPYTHON:
	@$(NORMAL_UNINSTALL)
	@list='$(qtgui_python_PYTHON)'; test -n "$(qtgui_pythondir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	filesc=`echo "$$files" | sed 's|$$|c|'`; \
	fileso=`echo "$$files" | sed 's|$$|o|'`; \
	echo " ( cd '$(DESTDIR)$(qtgui_pythondir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(qtgui_pythondir)" && rm -f $$files || exit $$?; \
	echo " ( cd '$(DESTDIR)$(qtgui_pythondir)' && rm -f" $$filesc ")"; \
	cd "$(DESTDIR)$(qtgui_pythondir)" && rm -f $$filesc || exit $$?; \
	echo " ( cd '$(DESTDIR)$(qtgui_pythondir)' && rm -f" $$fileso ")"; \
	cd "$(DESTDIR)$(qtgui_pythondir)" && rm -f $$fileso
install-grincludeHEADERS: $(grinclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(grincludedir)" || $(MKDIR_P) "$(DESTDIR)$(grincludedir)"
	@list='$(grinclude_HEADERS)'; test -n "$(grincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(grincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(grincludedir)" || exit $$?; \
	done

uninstall-grincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(grinclude_HEADERS)'; test -n "$(grincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(grincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(grincludedir)" && rm -f $$files
install-qtgui_swigincludeHEADERS: $(qtgui_swiginclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(qtgui_swigincludedir)" || $(MKDIR_P) "$(DESTDIR)$(qtgui_swigincludedir)"
	@list='$(qtgui_swiginclude_HEADERS)'; test -n "$(qtgui_swigincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(qtgui_swigincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(qtgui_swigincludedir)" || exit $$?; \
	done

uninstall-qtgui_swigincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(qtgui_swiginclude_HEADERS)'; test -n "$(qtgui_swigincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(qtgui_swigincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(qtgui_swigincludedir)" && rm -f $$files

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	$(MAKE) $(AM_MAKEFLAGS) \
	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
	  dist-hook
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(qtgui_pylibdir)" "$(DESTDIR)$(qtgui_pythondir)" "$(DESTDIR)$(grincludedir)" "$(DESTDIR)$(qtgui_swigincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-libLTLIBRARIES clean-libtool \
	clean-qtgui_pylibLTLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-grincludeHEADERS \
	install-qtgui_pylibLTLIBRARIES install-qtgui_pythonPYTHON \
	install-qtgui_swigincludeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-grincludeHEADERS uninstall-libLTLIBRARIES \
	uninstall-qtgui_pylibLTLIBRARIES uninstall-qtgui_pythonPYTHON \
	uninstall-qtgui_swigincludeHEADERS

.MAKE: all check install install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLTLIBRARIES clean-libtool \
	clean-qtgui_pylibLTLIBRARIES ctags dist-hook distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am \
	install-grincludeHEADERS install-html install-html-am \
	install-info install-info-am install-libLTLIBRARIES \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-qtgui_pylibLTLIBRARIES \
	install-qtgui_pythonPYTHON install-qtgui_swigincludeHEADERS \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-grincludeHEADERS uninstall-libLTLIBRARIES \
	uninstall-qtgui_pylibLTLIBRARIES uninstall-qtgui_pythonPYTHON \
	uninstall-qtgui_swigincludeHEADERS


# Base directory for documentation (docdir undefined in autoconf < 1.60)
docdir ?= $(datadir)/doc/$(PACKAGE)

# Don't distribute the files defined in the variable 'no_dist_files'
dist-hook:
	@for file in $(no_dist_files); do \
		echo $(RM) $(distdir)/$$file; \
		$(RM) $(distdir)/$$file; \
	done;

%_moc.cc : %.h
	$(QT_MOC_EXEC) -DQT_SHARED -DQT_NO_DEBUG -DQT_OPENGL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -p $(srcdir) $< -o $@

%_ui.h : %.ui
	$(QT_UIC_EXEC) $< -o $@

generate-makefile-swig $(srcdir)/Makefile.swig.gen: $(top_srcdir)/Makefile.swig.gen.t
	@do_recreate=0; \
	if test -f $(srcdir)/Makefile.swig.gen; then \
		if $(RM) $(srcdir)/Makefile.swig.gen 2>/dev/null; then \
			if touch $(srcdir)/Makefile.swig.gen 2>/dev/null; then \
				do_recreate=1; \
			fi; \
		fi; \
	else \
		if touch $(srcdir)/Makefile.swig.gen 2>/dev/null; then \
			do_recreate=1; \
		fi; \
	fi; \
	if test "$$do_recreate" == "1"; then \
		echo "Regenerating $(srcdir)/Makefile.swig.gen"; \
		for TFILE in $(TOP_SWIG_IFILES); do \
			TNAME=`python -c "import os.path as op; (dN, fN) = op.split ('$$TFILE'); (fbN, fE) = op.splitext (fN); print fbN;"`; \
			$(SED) -e 's|@NAME@|'$$TNAME'|g;' < $(top_srcdir)/Makefile.swig.gen.t >> $(srcdir)/Makefile.swig.gen; \
			echo "" >> $(srcdir)/Makefile.swig.gen; \
		done; \
	else \
		echo "Cannot recreate $(srcdir)/Makefile.swig.gen because the directory or file is write-protected."; \
		exit -1; \
	fi;

qtgui_pythondir_category ?= gnuradio/qtgui
qtgui_pylibdir_category ?= $(qtgui_pythondir_category)

qtgui.h qtgui.py qtgui.cc: qtgui.i
	trap 'rm -rf $(DEPDIR)/qtgui-generate-*' 1 2 13 15; \
	if mkdir $(DEPDIR)/qtgui-generate-lock 2>/dev/null; then \
		rm -f $(DEPDIR)/qtgui-generate-stamp; \
		$(MAKE) $(AM_MAKEFLAGS) $(DEPDIR)/qtgui-generate-stamp WHAT=$<; \
		rmdir $(DEPDIR)/qtgui-generate-lock; \
	else \
		while test -d $(DEPDIR)/qtgui-generate-lock; do \
			sleep 1; \
		done; \
		test -f $(DEPDIR)/qtgui-generate-stamp; \
		exit $$?; \
	fi;

$(DEPDIR)/qtgui-generate-stamp:
	if $(SWIG) $(STD_SWIG_PYTHON_ARGS) $(qtgui_swig_args) \
		-MD -MF $(DEPDIR)/qtgui.Std \
		-module qtgui -o qtgui.cc $(WHAT); then \
	    if test $(host_os) = mingw32; then \
		$(RM) $(DEPDIR)/qtgui.Sd; \
		$(SED) 's,\\\\,/,g' < $(DEPDIR)/qtgui.Std \
			> $(DEPDIR)/qtgui.Sd; \
		$(RM) $(DEPDIR)/qtgui.Std; \
		$(MV) $(DEPDIR)/qtgui.Sd $(DEPDIR)/qtgui.Std; \
	    fi; \
	else \
	    $(RM) $(DEPDIR)/qtgui.S*; exit 1; \
	fi;
	$(RM) $(DEPDIR)/qtgui.d
	cp $(DEPDIR)/qtgui.Std $(DEPDIR)/qtgui.d
	echo "" >> $(DEPDIR)/qtgui.d
	$(SED) -e '1d;s, \\,,g;s, ,,g' < $(DEPDIR)/qtgui.Std | \
		awk '{ printf "%s:\n\n", $$0 }' >> $(DEPDIR)/qtgui.d
	$(RM) $(DEPDIR)/qtgui.Std
	touch $(DEPDIR)/qtgui-generate-stamp

# KLUDGE: Force runtime include of a SWIG dependency file.  This is
# not guaranteed to be portable, but will probably work.  If it works,
# we have accurate dependencies for our swig stuff, which is good.

include ./$(DEPDIR)/qtgui.d

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
